#############################################################################
# PLEASE NOTE: This config file is only intended for use with docker-compose
# in local environments, and it is not the same file that will be used in
# production environments using kubernetes.
#
# Some configuration here doesn't directly apply when running nginx on a
# kubernetes Pod (for example the upstream server).
#
# The main purpose of this file is to facilitate testing, and to be able to
# build a local container very similar to those in a real production
# environment (but of course, without a kubernetes cluster).
#############################################################################

events {
  worker_connections 1024;
}

http {
  include /etc/nginx/mime.types;

  upstream webapp {
    server webapp:3000;
  }

  server {
    listen 80;

    root /home/www/public;

    # http://nginx.org/en/docs/http/ngx_http_core_module.html#try_files
    #
    # Tries URIs in sequence until one is found.
    # First we try to serve static files directly from nginx.
    # The rails application is the last alternative.
    #
    # /maintenance.html can be symlinked into public/ to stop requests
    # before they reach the rails app (e.g. while updating the DB).
    # When it does not exist (normally), it's quickly skipped.
    #
    try_files /maintenance.html $uri $uri/index.html @webapp;

    # If upstream is not available, fallback to static error page.
    error_page 502 503 504 /503.html;

    location /assets/ping.json {
      return 200 "{}";
    }

    location ^~ /assets/ {
      access_log  off;
      gzip_static on;

      # Rails automatically appends digest fingerprints to asset file names,
      # so we don't need to worry about expiring them.
      #
      expires max;
      add_header Cache-Control public;

      try_files $uri @webapp;
    }

    location @webapp {
      proxy_redirect  off;
      proxy_pass      http://webapp;

      proxy_next_upstream     error timeout invalid_header;
      proxy_connect_timeout   1;

      proxy_set_header   X-Real-IP          $HTTP_X_REAL_IP;
      proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto  $HTTP_X_FORWARDED_PROTO;
      proxy_set_header   Host               $http_host;
    }
  }
}
